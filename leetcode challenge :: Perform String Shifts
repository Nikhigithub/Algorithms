Question : You are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [direction, amount]:

direction can be 0 (for left shift) or 1 (for right shift). 
amount is the amount by which string s is to be shifted.
A left shift by 1 means remove the first character of s and append it to the end.
Similarly, a right shift by 1 means remove the last character of s and add it to the beginning.
Return the final string after all operations.

Input: s = "abc", shift = [[0,1],[1,2]]
Output: "cab"
Explanation: 
[0,1] means shift to left by 1. "abc" -> "bca"
[1,2] means shift to right by 2. "bca" -> "cab"


Input: s = "abcdefg", shift = [[1,1],[1,1],[0,2],[1,3]]
Output: "efgabcd"
Explanation:  
[1,1] means shift to right by 1. "abcdefg" -> "gabcdef"
[1,1] means shift to right by 1. "gabcdef" -> "fgabcde"
[0,2] means shift to left by 2. "fgabcde" -> "abcdefg"
[1,3] means shift to right by 3. "abcdefg" -> "efgabcd"



class Solution {
    public String stringShift(String s, int[][] shift) {
     int amt=0;
   
     for(int  i=0;i<shift.length;i++){
      int[] shiftvalues = shift[i];   
      if(shiftvalues[0] == 0){
         amt = amt-shiftvalues[1]; 
      }
      if(shiftvalues[0] ==1){
          amt = amt+shiftvalues[1];
      }   
     }
     int len = s.length();
     StringBuilder str = new StringBuilder();    
        if(amt <0){
            amt = -amt;
            while(amt>len){
                amt = amt-len;
            }
            for(int k= amt; k<len;k++){
               str.append(s.charAt(k)); 
            }
            for(int i=0;i<amt;i++){
               str.append(s.charAt(i)); 
            }
        }else{
            while(amt>len ){
                amt =amt-len;
            }
          for(int l = len-amt ; l<len;l++){
              str.append(s.charAt(l));
          }
          for(int n=0;n<len-amt;n++){
              str.append(s.charAt(n));
          }  
        }
        
      return str.toString();  
    }
}
