//Solution-1
class Solution {
    public int[] productExceptSelf(int[] nums) {
    int[] result = new int[nums.length];
     int k=0;
     int current=0;
     int prod=1;   
     while(k<nums.length){
      current =k; 
      prod=1;   
       for(int i=0;i<nums.length;i++){
         if(i!=current){
             prod = prod*nums[i];
         }  
       }
       result[k]=prod;
       k++;
         
     }
        
     return result;  
    }
}

Time Complexity - O(N square) and space is O(N) where N is the number of elements in an array



Solution -2 : 
class Solution {
    public int[] productExceptSelf(int[] nums) {
    int[] result = new int[nums.length];
    int[] left = new int[nums.length];
    int[] right = new int[nums.length];
    
    left[0]=1;    
    for(int i=1;i<nums.length;i++){
      left[i]=left[i-1]*nums[i-1];  
    }    
    right[nums.length-1]=1;    
    for(int i=nums.length-2;i>=0;i--){
        right[i]= right[i+1]*nums[i+1];
    }
     
    for(int k=0;k<nums.length;k++){
      result[k] = left[k]*right[k];  
    }    
        
     return result;  
    }
}

Time Complexity: O(N) and space complexity O(N);
Method: Take a new left and right arrays and calculate th left and right product and compute the result array by multiplying the left and the right arrays 

//Solution -3 : 
We can solve this problem by running a loop and having the product and then running for the result variable , where we divide the product with the variable.
This can be done if division is allowed. and note that we cannot handle o values as we cant divide by zero.

//Solution-4::
class Solution {
    public int[] productExceptSelf(int[] nums) {
    int[] result = new int[nums.length];

    result[0]=1;    
    for(int i=1;i<nums.length;i++){
      result[i]=result[i-1]*nums[i-1];  
    }    
    int right=1;    
    for(int i=nums.length-2;i>=0;i--){
        right = right *nums[i+1];
        result[i]= result[i]*right;
    }
     

     return result;  
    }
}


Time Complexity : O(N) and Space Complexity : O(N) as where N is the number of elements in the array. If we dont consider the  new result array for space complexity then the space complexity is  O(1).
Method: for the first loop store the product of left elements and use the same array and iterate to calculate the right product to get the result array.



