/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
      ArrayList<Integer> arr = new ArrayList<Integer>();
      ArrayList<Integer> result = new ArrayList<Integer>();  
      Stack<TreeNode> stk = new Stack<TreeNode>();  
        
      if(root!=null){
        stk.push(root);  
      }else{
          return arr;
      }  
      
      TreeNode prev = null;  
        
      while(!stk.isEmpty()){
        TreeNode curr= stk.pop();
        if(curr.left!=null){
          stk.push(curr.left);
        } 
        if(curr.right!=null){
          stk.push(curr.right);
        }
        arr.add(curr.val);      
      }  
        
      for(int i=arr.size()-1;i>=0;i--){
          result.add(arr.get(i));
      }
      return result;  
    }
}


Time Complexity: O(N) , N being the nodes in the tree. 
Space Complexity is : O(h) WHERE h is the height of the tree
Approach : Do the preorder traversal and just reverse the array. 




Approach 2: using one stack 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
      ArrayList<Integer> result = new ArrayList<Integer>();  
      Stack<TreeNode> stk = new Stack<TreeNode>();  
        
      if(root!=null){
        stk.push(root);  
      }else{
        return result;
      }  

      TreeNode curr = root;  
      while(!stk.isEmpty()){
        if(curr!=null ){
            if(curr!=root){
            stk.push(curr);
            }
            curr= curr.left;
        }
        else{
          TreeNode temp = stk.peek().right;
          if(temp==null){
            temp = stk.pop();
            result.add(temp.val);  
          
          while(!stk.isEmpty() && temp==stk.peek().right){
              temp = stk.pop();
              result.add(temp.val); 
          }
          }else{
              curr=temp; 
          } 
            
        }  
          
      }  
    
      return result;  
    }
}



Approach 3:: Two stacks 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
      ArrayList<Integer> result = new ArrayList<Integer>();  
      Stack<TreeNode> stk1 = new Stack<TreeNode>(); 
      Stack<Integer>  stk2 = new Stack<Integer>();
      if(root!=null){
      stk1.push(root);
      }
      
      while(!stk1.isEmpty()){
        TreeNode temp = stk1.pop();
        stk2.push(temp.val);
          
        if(temp.left!=null){
          stk1.push(temp.left);  
        }
        if(temp.right!=null){
          stk1.push(temp.right);  
        }  
      } 
      
        System.out.println(stk2.size());
      for(int i=stk2.size()-1;i>=0;i--){
        result.add(stk2.pop());  
      }  
        return result;
    }
}



Approah four : using two stacks
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
      LinkedList<Integer> result = new LinkedList<Integer>();  
      LinkedList<TreeNode> stk1 = new LinkedList<>();
     // Stack<Integer>  stk2 = new Stack<Integer>();
      if(root!=null){
      stk1.push(root);
      }
      
      while(!stk1.isEmpty()){
        TreeNode temp = stk1.pollLast();
        result.addFirst(temp.val);
          
        if(temp.left!=null){
          stk1.add(temp.left);  
        }
        if(temp.right!=null){
          stk1.add(temp.right);  
        }  
      } 
      
      return result;
    }
}
