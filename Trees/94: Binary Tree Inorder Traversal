/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
      ArrayList<Integer> arr = new ArrayList<Integer>();
      inorder(root, arr);     
      return arr;  
    }
    
  public void inorder(TreeNode root, List<Integer> arr){
       if(root != null){
          if(root.left!=null){
           inorder(root.left, arr);
           }
          arr.add(root.val);
          if(root.right!=null){
           inorder(root.right, arr);
          }
        } 
  }  
    
}


//iterative solution 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
      ArrayList<Integer> arr = new ArrayList<Integer>();
      Stack<TreeNode> stk = new Stack<TreeNode>();
      //stk.add(root);   
      while(!stk.isEmpty()|| root!= null){
       while(root!= null){
         stk.add(root);
         root = root.left;  
       }
         if(!stk.isEmpty()) {
         root = stk.pop();   
        }   
       arr.add(root.val);
       root = root.right;
       
      } 
        
      return arr;  
  }  
    
}
