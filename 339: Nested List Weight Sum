/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer isInteger()();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        
        return repeatfun(nestedList,1);
    }
    
    public int repeatfun(List<NestedInteger> sample, int level){
       int result=0;
        for(int i=0;i<sample.size();i++){
          if(sample.get(i).isInteger()){
              result = result + sample.get(i).getInteger() * level;
          }else{
            result = result+ repeatfun(sample.get(i).getList(), level+1);  
            }  
        }
         
        return result;
    }
}


// Logic: We iterate through the list one by one by keepig track of the depth. If we find a integer then we append the result with integer*depth. Else if it is a list, then we calculate the sum of the list recursiely using the same process with depth = depth +1;

//Time Complexity: O(nestedList.length)
//Space Complexity : O(k) - where K is the recursive calls that are places on the stack;
