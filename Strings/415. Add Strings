class Solution {
    public String addStrings(String num1, String num2) {
     StringBuilder str = new StringBuilder();  
     int len1 = num1.length()-1;
     int len2 = num2.length()-1;
     int carry =0;  
      while(len1>=0 || len2>=0){
          int l1= len1>=0 ? num1.charAt(len1) -'0' :0;
          int l2 = len2>=0 ? num2.charAt(len2)-'0' : 0;
          int temp =l1+l2+carry;
          len1--;
          len2--; 
          str.append(temp%10);
          carry = temp/10;  
      }
   
          if(carry!=0){ 
           str.append(carry);   
          }
        
     return str.reverse().toString();   
    }
}


Time complexity is : O(max(n1, n2)) , where n1 and n2 are the length of two strings. Here we do maximum of (n1, n2) iterations
Space Complexity is : O(max(n1,n2)) because the new string is max(n1,n2)+1
